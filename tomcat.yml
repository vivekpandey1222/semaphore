---
- name: Deploy Tomcat container with JMX
  hosts: my_servers
  vars:
    ansible_python_interpreter: /usr/bin/python3
    tomcat_image: "docker.io/library/tomcat:latest"
    tomcat_container_name: "tomcat1"
    tomcat_ports:
      - "8075:8080"
      - "8888:8888"  # Adding JMX port
    tomcat_status_filter: "name=tomcat_container"
    war_file: "/home/madhur/test/webapps/SampleWebApp.war"
    tomcat_webapps_dir: "/usr/local/tomcat/webapps"
    tomcat_base_dir: "/home/madhur/test"
    tomcat_logs_dir: "/home/madhur/test/logs"
    jmx_jar_url: "jmx_prometheus_javaagent-0.16.1.jar"
    jmx_jar_path: "/usr/local/tomcat/bin/jmx_prometheus_javaagent-0.16.1.jar"
    jmx_yml_file: "/home/madhur/test/tomcat.yml"
    setenv_file: "/home/madhur/test/setenv.sh"

  tasks:
    - name: Pull the Tomcat container image
      containers.podman.podman_image:
        name: "{{ tomcat_image }}"
        tag: latest

          #- name: Create necessary directories
          #file:
          #path: "{{ item }}"
          #state: directory
          #mode: '0755'
          #with_items:
          #- "{{ tomcat_base_dir }}"
          #- "{{ tomcat_logs_dir }}"
    
          #- name: Download JMX Prometheus Java Agent
          #get_url:
          # url: "{{ jmx_jar_url }}"
          #dest: "{{ tomcat_base_dir }}/jmx_prometheus_javaagent-0.16.1.jar"
          #mode: '0644'

    - name: Run Tomcat container
      containers.podman.podman_container:
        name: "{{ tomcat_container_name }}"
        image: "{{ tomcat_image }}"
        state: started
        ports: "{{ tomcat_ports }}"
        volumes:
          - "{{ tomcat_base_dir }}/jmx_prometheus_javaagent-0.16.1.jar:{{ jmx_jar_path }}"
          - "{{ jmx_yml_file }}:/usr/local/tomcat/bin/tomcat.yml"
          - "{{ setenv_file }}:/usr/local/tomcat/bin/setenv.sh"
          - "{{ tomcat_logs_dir }}:/usr/local/tomcat/logs"
          - "{{ tomcat_base_dir }}/webapps:/usr/local/tomcat/webapps"

            # - name: Wait for Tomcat to start
            #wait_for:
            #host: localhost
            #port: 8075
          #delay: 10
          #timeout: 120

    - name: Verify Tomcat container is running
      command: podman ps --filter "{{ tomcat_status_filter }}" --format "{{'{{.Status}}'}}"
      register: container_status

    - name: Debug container status
      debug:
        var: container_status.stdout

    - name: Print Tomcat container logs for debugging
      command: podman logs {{ tomcat_container_name }}
      register: tomcat_logs
      ignore_errors: yes

    - name: Debug Tomcat logs
      debug:
        var: tomcat_logs.stdout
